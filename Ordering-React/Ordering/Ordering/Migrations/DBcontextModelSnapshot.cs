// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ordering.DAL;

namespace Ordering.Migrations
{
    [DbContext(typeof(DBcontext))]
    partial class DBcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ordering.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Since");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new { ID = 1, Name = "Coca Cola", Revenue = 492.12m, Since = new DateTime(2014, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { ID = 2, Name = "Teamleader", Revenue = 1505.95m, Since = new DateTime(2015, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { ID = 3, Name = "Jeroen De Wit", Revenue = 0.0m, Since = new DateTime(2016, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Ordering.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new { ID = 1, CustomerId = 1, Total = 49.90m },
                        new { ID = 2, CustomerId = 2, Total = 24.95m },
                        new { ID = 3, CustomerId = 3, Total = 69.00m }
                    );
                });

            modelBuilder.Entity("Ordering.Models.OrderDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("ID");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new { ID = 1, OrderId = 1, ProductId = 4, Quantity = 10 },
                        new { ID = 2, OrderId = 2, ProductId = 4, Quantity = 5 },
                        new { ID = 3, OrderId = 3, ProductId = 1, Quantity = 2 },
                        new { ID = 4, OrderId = 3, ProductId = 2, Quantity = 1 }
                    );
                });

            modelBuilder.Entity("Ordering.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.Property<string>("Description");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode");

                    b.HasKey("ID");

                    b.ToTable("Products");

                    b.HasData(
                        new { ID = 1, Category = "1", Description = "Screwdriver", Price = 9.75m, ProductCode = "A101" },
                        new { ID = 2, Category = "1", Description = "Electric Screwdriver", Price = 49.50m, ProductCode = "A102" },
                        new { ID = 3, Category = "2", Description = "Basic on-off switch", Price = 4.99m, ProductCode = "B101" },
                        new { ID = 4, Category = "2", Description = "Press Button", Price = 4.99m, ProductCode = "B102" },
                        new { ID = 5, Category = "2", Description = "Switch with motion detector", Price = 12.95m, ProductCode = "B103" }
                    );
                });

            modelBuilder.Entity("Ordering.Models.Order", b =>
                {
                    b.HasOne("Ordering.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ordering.Models.OrderDetail", b =>
                {
                    b.HasOne("Ordering.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ordering.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
